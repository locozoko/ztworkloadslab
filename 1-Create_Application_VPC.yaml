AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template deploys a VPC with a public subnet, an applications private subnet, DNS, NAT and Internet Gateways. 
  It also provisions a Linux Bastion host, ZPA App Connector, and Linux application instances.
  

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: "My IP address"
        Parameters:
          - MyIP
      - Label:
          default: "EC2 Key Pair"
        Parameters:
          - KeyPair

      - Label:
          default: "VPC Details"
        Parameters:
          - EnvironmentName

      - Label:
          default: "ZPA Details"
        Parameters:
          - ZpaProvisioningKey

      - Label:
          default: "DNS Zone Details"
        Parameters:
          - MyDnsZone
          - MyRegion
    
    ParameterLabels:
      MyIP:
        default: "My IP address. Do NOT include /32 at the end as this will be added automatically"
      EnvironmentName:
        default: "Name of the self-contained environment"
      KeyPair:
        default: "Name of the key pair for use with bastion host and Application instances"
      ZpaProvisioningKey:
        default: "ProvisioningKey"
      MyDnsZone:
        default: "Type an internal domain name for your DNS Zone"
      MyRegion:
        default: "Select the Region where this lab will be deployed"

Parameters:
  MyIP:
    Description: >
      My IP address
    Type: String
    
  EnvironmentName:
    Description: > 
      An environment name that is prefixed to resource names
    Type: String
    Default: Lab-VPC1
  
  KeyPair:
    Description: Key pair name
    Type: AWS::EC2::KeyPair::KeyName

  ZpaProvisioningKey:
    Description: The ZPA provisioning key to use
    Type: String
    ConstraintDescription: As copied from ZPA UI - do not add extra characters or double quotes!

  MyRegion:
    Description: >
      Region for App Connector
    Type: String
    Default: us-east-1
    AllowedValues:
      - us-east-2
      - us-east-1
      - us-west-1
      - us-west-2
      - af-south-1
      - ap-east-1
      - ap-south-2
      - ap-southeast-3
      - ap-south-1
      - ap-northeast-3
      - ap-northeast-2
      - ap-northeast-1
      - ap-southeast-1
      - ap-southeast-2
      - ca-central-1
      - eu-central-1
      - eu-west-1
      - eu-west-2
      - eu-south-1
      - eu-west-3
      - eu-south-2
      - eu-north-1
      - eu-central-2
      - me-south-1
      - me-central-1
      - sa-east-1
      - us-gov-east-1
      - us-gov-west-1

  MyDnsZone:
    Description: > 
      Domain for DNS Zone
    Type: String
    Default: "mytestdomain.com"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.192.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: "10.192.10.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet

  ApplicationSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: "10.192.30.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Application Subnet

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  ApplicationRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Application Routes

  DefaultApplicationRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ApplicationRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  ApplicationSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ApplicationRouteTable
      SubnetId: !Ref ApplicationSubnet

  ApplicationInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Application-Instance-SG"
      GroupDescription: "Allow SSH and RDP from Bastion Host"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ApplicationSG'
      
  BastionHostSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Bastion-Host-SG"
      GroupDescription: "Security group for bastion host"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Join
                    - ''
                    - - !Ref MyIP
                      - '/32'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-BastionHostSG'

  SSMIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'

  SSMProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref SSMIAMRole

  LinuxApplicationInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      InstanceType: t2.micro
      SubnetId: !Ref ApplicationSubnet
      IamInstanceProfile: !Ref SSMProfile
      KeyName: !Ref KeyPair 
      SecurityGroupIds: 
        - !Ref ApplicationInstanceSG
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-App1'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo sed 's/PasswordAuthentication no/PasswordAuthentication yes/' -i /etc/ssh/sshd_config
          sudo systemctl restart sshd
          sudo service sshd restart
          echo 'Zscaler123!' | sudo passwd --stdin ec2-user
          sleep 15
          sudo yum update -y
          sudo yum install cloud-init -y
          sudo yum install httpd.x86_64 -y
          sudo systemctl start httpd.service
          sudo systemctl enable httpd.service
          sudo echo "Private Application 1" > /var/www/html/index.html
          echo "PS1=\"[\\u@App1 \\W]\\$ \"" >> /home/ec2-user/.bashrc

  LinuxApplicationInstance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      InstanceType: t2.micro
      SubnetId: !Ref ApplicationSubnet
      IamInstanceProfile: !Ref SSMProfile
      KeyName: !Ref KeyPair 
      SecurityGroupIds: 
        - !Ref ApplicationInstanceSG
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-App2'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo sed 's/PasswordAuthentication no/PasswordAuthentication yes/' -i /etc/ssh/sshd_config
          sudo systemctl restart sshd
          sudo service sshd restart
          echo 'Zscaler123!' | sudo passwd --stdin ec2-user
          sleep 15
          sudo yum update -y
          sudo yum install cloud-init -y
          sudo yum install httpd.x86_64 -y
          sudo systemctl start httpd.service
          sudo systemctl enable httpd.service
          sudo echo "Private Application 2" > /var/www/html/index.html
          echo "PS1=\"[\\u@App2 \\W]\\$ \"" >> /home/ec2-user/.bashrc
  
  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref SSMProfile
      KeyName: !Ref KeyPair 
      SecurityGroupIds: 
        - !Ref BastionHostSG
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-BastionHost'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install updates
          yum update -y
          # Update prompt to reflect instance name
          echo "PS1=\"[\\u@BastionHost \\W]\\$ \"" >> /home/ec2-user/.bashrc

  AppConnEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: '{{resolve:ssm:/aws/service/marketplace/prod-l52usx2iyugek/zpa-connector-ami-2022.11}}'
      InstanceType: "t3.medium"
      KeyName: !Ref KeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
          - !Ref ApplicationInstanceSG
          SubnetId: !Ref ApplicationSubnet
      Tags:
         - Key: "Name"
           Value: !Sub '${AWS::StackName}-AppConnector'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          #Stop the App Connector service which was auto-started at boot time
          systemctl stop zpa-connector
          #Copy App Connector provisioning key from ZPA Admin Portal to a file
          #The provisioning key must be within between double quotes
          echo "${ZpaProvisioningKey}" > /opt/zscaler/var/provision_key
          #Run a yum update to apply the latest patches
          yum update -y
          #Start the App Connector service to enroll it in the ZPA cloud
          systemctl start zpa-connector
          #Wait for the App Connector to download the latest build
          sleep 60
          #Stop and then start the App Connector to run the latest build
          systemctl stop zpa-connector
          systemctl start zpa-connector

  DNSZone: 
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: 'DNS Hosted Zone'
      Name: !Ref MyDnsZone
      VPCs: 
        - 
          VPCId: !Ref VPC
          VPCRegion: !Ref MyRegion
    DependsOn: VPC

  DNSApplicationApp1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${MyDnsZone}.'
      Name: !Sub 'app1.${MyDnsZone}'
      Type: A
      TTL: '300'
      ResourceRecords:
          - !GetAtt LinuxApplicationInstance.PrivateIp
    DependsOn: 
      - DNSZone
      - ApplicationSubnet
      - LinuxApplicationInstance

  DNSApplicationApp2:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${MyDnsZone}.'
      Name: !Sub 'app2.${MyDnsZone}'
      Type: A
      TTL: '300'
      ResourceRecords:
          - !GetAtt LinuxApplicationInstance2.PrivateIp
    DependsOn:
      - DNSZone
      - ApplicationSubnet
      - LinuxApplicationInstance2

Outputs:

  AppConnPrivateIP:
    Description: App Connector Private IP
    Value: !GetAtt
      - AppConnEC2Instance
      - PrivateIp

  AppServer1IP:
    Description: App Connector Private IP
    Value: !GetAtt
      - LinuxApplicationInstance
      - PrivateIp

  AppServer2IP:
    Description: App Connector Private IP
    Value: !GetAtt
      - LinuxApplicationInstance2
      - PrivateIp

  PublicBastionIP:
    Description: Bastion Host Public IP
    Value: !GetAtt
      - BastionHost
      - PublicIp

  DnsZoneName:
    Description: DNS Zone Name
    Value: !Ref MyDnsZone

  AppServer1FQDN:
    Description: App Server 1 FQDN
    Value: !Ref DNSApplicationApp1

  AppServer2FQDN:
    Description: App Server 1 FQDN
    Value: !Ref DNSApplicationApp2